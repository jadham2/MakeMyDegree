openapi: 3.0.2
info:
  title: MakeMyDegree
  version: 0.1.0
  description: "API for MakemyDegree"
paths:
  /users:
    summary: Register and query users.
    get:
      summary: Get all users.
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user.
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    summary: Query, update, or delete the user with the given user_id.
    get:
      parameters:
        - name: user_id
          in: path
          description: The user_id of the user to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The user with the given user_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: The user with the given user_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: user_id
          in: path
          description: The user_id of the user to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: The user with the given user_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The user with the given user_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: user_id
          in: path
          description: The user_id of the user to be deleted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: The user with the given user_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}/plan/update:
    summary: Update the plan of the user with the given user_id.
    put:
      summary: Update the plan and get audit response.
      parameters:
        - name: user_id
          in: path
          description: The user_id of the user who wants the plan updated and validated.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Plan was updated and audit info was retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  requisities:
                    type: object
                    properties:
                      courseID:
                        type: array
                        items:
                          type: integer
                    example:
                      231: ["23", "13", "441"]
                      123: ["2", "16", "230"]
                  degree:
                    type: object
                    properties:
                      tagID:
                        type: array
                        items:
                          type: integer
                    example:
                      212: 6
                      621: 3
                      41: 15
  /degrees:
    summary: Register and query degrees.
    get:
      summary: Get all degrees.
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Degree'
    post:
      summary: Create a new degree.
      requestBody:
        description: Degree object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Degree'
      responses:
        201:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Degree'
        400:
          description: Invalid degree supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /degrees/{degree_id}:
    summary: Query, update, or delete the degree with the given degree_id.
    get:
      parameters:
        - name: degree_id
          in: path
          description: The degree_id of the degree to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The degree with the given degree_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Degree'
        404:
          description: The degree with the given degree_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: degree_id
          in: path
          description: The degree_id of the degree to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: The degree to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Degree'
      responses:
        200:
          description: The degree with the given degree_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Degree'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The degree with the given degree_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: degree_id
          in: path
          description: The degree_id of the degree to be deleted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: The degree with the given degree_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /degrees/{degree_id}/rules:
    summary: Query the rules of the degree with the given degree_id.
    get:
      parameters:
        - name: degree_id
          in: path
          description: The degree_id of the degree to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The rules of the degree with the given degree_id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        404:
          description: The degree with the given degree_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /courses:
    summary: Register and query courses.
    get:
      summary: Get all courses.
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      summary: Create a new course.
      requestBody:
        description: Course object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        201:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Invalid course supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /courses/{course_id}:
    summary: Query, update, or delete the course with the given course_id.
    get:
      parameters:
        - name: course_id
          in: path
          description: The course_id of the course to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The course with the given course_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        404:
          description: The course with the given course_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: course_id
          in: path
          description: The course_id of the course to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: The course to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        200:
          description: The course with the given course_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The course with the given course_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: course_id
          in: path
          description: The course_id of the course to be deleted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: The course with the given course_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags:
    summary: Register and query tags.
    get:
      summary: Get all tags.
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      summary: Create a new tag.
      requestBody:
        description: Tag object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        201:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/{tag_id}:
    summary: Query, update, or delete the tag with the given tag_id.
    get:
      parameters:
        - name: tag_id
          in: path
          description: The tag_id of the tag to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The tag with the given tag_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        404:
          description: The tag with the given tag_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: tag_id
          in: path
          description: The tag_id of the tag to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: The tag to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: The tag with the given tag_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The tag with the given tag_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: tag_id
          in: path
          description: The tag_id of the tag to be deleted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: The tag with the given tag_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /course_tags:
    summary: Register and query course_tags.
    get:
      summary: Get all course_tags.
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseTag'
    post:
      summary: Create a new course_tag.
      requestBody:
        description: CourseTag object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseTag'
      responses:
        201:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseTag'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /course_tags/{course_tag_id}:
    summary: Query, update, or delete the course_tag with the given course_tag_id.
    get:
      parameters:
        - name: course_tag_id
          in: path
          description: The course_tag_id of the course_tag to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The course_tag with the given course_tag_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseTag'
        404:
          description: The course_tag with the given course_tag_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: course_tag_id
          in: path
          description: The course_tag_id of the course_tag to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: The course_tag to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseTag'
      responses:
        200:
          description: The course_tag with the given course_tag_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseTag'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The course_tag with the given course_tag_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: course_tag_id
          in: path
          description: The course_tag_id of the course_tag to be deleted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: The course_tag with the given course_tag_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /requisites:
    summary: Register and query requisites.
    get:
      summary: Get all requisites.
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Requisite'
    post:
      summary: Create a new requisite.
      requestBody:
        description: Requisite object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Requisite'
      responses:
        201:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requisite'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /requisites/{requisite_id}:
    summary: Query, update, or delete the requisite with the given requisite_id.
    get:
      parameters:
        - name: requisite_id
          in: path
          description: The requisite_id of the requisite to be queried.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The requisite with the given requisite_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requisite'
        404:
          description: The requisite with the given requisite_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: requisite_id
          in: path
          description: The requisite_id of the requisite to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: The requisite to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Requisite'
      responses:
        200:
          description: The requisite with the given requisite_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requisite'
        400:
          description: Malformed Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requisite with the given requisite_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: requisite_id
          in: path
          description: The requisite_id of the requisite to be deleted.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: The requisite with the given requisite_id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        error_code:
          type: string
          description: The error code.
          example: "404"
        error:
          type: string
          description: The error message.
          example: "The resource does not exist."
    Success:
      type: object
      properties:
        success_code:
          type: string
          description: The success code.
          example: "201"
        success:
          type: string
          description: The success message.
          example: "The resource has been created."
    User:
      required:
      - ID
      - Name
      - Password
      - Email
      - Degree
      - CurrPlan
      type: object
      properties:
        ID:
          type: integer
          description: "Unique ID for the user."
          example: 12
        Name:
          type: string
          description: "Name of the user."
          example: "Jason Adham"
        Password:
          type: string
          format: password
          description: "Password of the user."
          example: "hunter2"
        Email:
          type: string
          description: "Email of the user."
          example: "jleizhang@purdue.edu"
        CurrPlan:
          type: object
          description: "User's current plan."
    Course:
      required:
      - ID
      - Name
      - Tag
      - Credits
      - Description
      - Terms
      type: object
      properties:
        ID:
          type: integer
          description: "Unique ID for the course."
          example: 152
        Name:
          type: string
          description: "Name of the course."
          example: "Signals and Systems"
        Tag:
          type: string
          description: "Tag of the course."
          example: "ECE 30100"
        Credits:
          type: integer
          description: "Credit count of the course."
          example: 3
        Description:
          type: string
          description: "Description of the course."
          example: >-
            Classification, analysis and design of systems in both the time
            and frequency-domains. Continuous-time linear systems: Fourier Series,
            Fourier Transform, bilateral Laplace Transform. Discrete-time linear systems:
            difference equations, Discrete-Time Fourier Transform, bilateral z-Transform.
            Sampling, quantization, and discrete-time processing of continuous-time signals.
            Discrete-time nonlinear systems: median-type filters, threshold decomposition.
            System design examples such as the compact disc player and AM radio.
        Terms:
          type: array
          items:
            type: string
          description: "Terms the course is in."
          example: [ "Fa20", "Sp21", "Fa21" ]
    Requisite:
      required:
      - CourseID
      - Requisite
      - RequisiteType
      type: object
      properties:
        CourseID:
          type: integer
          description: "Course ID for the course that we want the requisites for."
          example: 342
        Requisite:
          type: integer
          description: "Course ID for the requisite of the course."
          example: 132
        RequisiteType:
          type: string
          description: "Indicator for if the course is a co-requisite or pre-requisite"
          example: "Prerequisite"
    Degree:
      required:
      - ID
      - Type
      - Name
      - School
      - Term
      type: object
      properties:
        ID:
          type: integer
          description: "Unique ID for the degree."
          example: 231
        Type:
          type: string
          description: "Type of the degree."
          example: "BS"
        Name:
          type: string
          description: "Name of the major of the degree."
          example: "Computer Engineering"
        School:
          type: string
          description: "School the degree falls under."
          example: "ECE"
        Term:
          type: string
          description: "Term for the degree."
          example: "Fa2019"
    Tag:
      required:
      - ID
      - DegreeID
      - Name
      - Rule
      type: object
      properties:
        ID:
          type: integer
          description: "Unique ID for the tag."
          example: 123
        DegreeID:
          type: integer
          description: "ID of the degree this tag applies to."
          example: 231
        Name:
          type: string
          description: "Name of the tag / rule."
          example: "General Education Requirements"
        Rule:
          type: string
          description: "Rule for the tag."
          example: ">= 17"
    CourseTag:
      required:
      - ID
      - TagID
      - CourseID
      properties:
        ID:
          type: integer
          description: "ID for the course-tag mapping."
          example: 2
        TagID:
          type: integer
          description: "ID for the tag in the course-tag map."
          example: 123
        CourseID:
          type: integer
          description: "ID for the course in the course-tag map."
          example: 342
